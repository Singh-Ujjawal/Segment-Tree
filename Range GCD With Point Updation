struct SegmentTree {
    int n;
    vector<long long> seg;

    SegmentTree(vector<long long>& arr) {
        n = arr.size();
        seg.resize(4*n);
        build(0, 0, n-1, arr);
    }

    void build(int idx, int l, int r, vector<long long>& arr) {
        if (l == r) {
            seg[idx] = arr[l];
            return;
        }
        int mid = (l + r) / 2;
        build(2*idx+1, l, mid, arr);
        build(2*idx+2, mid+1, r, arr);
        seg[idx] = __gcd(seg[2*idx+1], seg[2*idx+2]);
    }

    void update(int idx, int l, int r, int pos, long long val) {
        if (l == r) {
            seg[idx] = val;
            return;
        }
        int mid = (l + r) / 2;
        if (pos <= mid) update(2*idx+1, l, mid, pos, val);
        else update(2*idx+2, mid+1, r, pos, val);
        seg[idx] = __gcd(seg[2*idx+1], seg[2*idx+2]);
    }

    void update(int pos, long long val) {
        update(0, 0, n-1, pos, val);
    }

    long long query(int idx, int l, int r, int ql, int qr) {
        if (qr < l || ql > r) return 0; // gcd(x,0)=x
        if (ql <= l && r <= qr) return seg[idx];
        int mid = (l + r) / 2;
        return __gcd(
            query(2*idx+1, l, mid, ql, qr),
            query(2*idx+2, mid+1, r, ql, qr)
        );
    }

    long long query(int l, int r) {
        return query(0, 0, n-1, l, r);
    }
};
